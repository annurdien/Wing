{"includedArchiveIdentifiers":["Wing"],"interfaceLanguages":{"swift":[{"children":[{"title":"Extended Modules","type":"groupMarker"},{"children":[{"title":"Extended Structures","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/wing\/foundation\/date\/addingdays(_:)","title":"func addingDays(Int) -> Date","type":"method"},{"path":"\/documentation\/wing\/foundation\/date\/addinghours(_:)","title":"func addingHours(Int) -> Date","type":"method"},{"path":"\/documentation\/wing\/foundation\/date\/days(from:)","title":"func days(from: Date) -> Int","type":"method"},{"path":"\/documentation\/wing\/foundation\/date\/isinfuture()","title":"func isInFuture() -> Bool","type":"method"},{"path":"\/documentation\/wing\/foundation\/date\/isinpast()","title":"func isInPast() -> Bool","type":"method"},{"path":"\/documentation\/wing\/foundation\/date\/istoday()","title":"func isToday() -> Bool","type":"method"},{"path":"\/documentation\/wing\/foundation\/date\/tostring(_:)","title":"func toString(String) -> String","type":"method"},{"path":"\/documentation\/wing\/foundation\/date\/tostring(datestyle:timestyle:)","title":"func toString(dateStyle: DateFormatter.Style, timeStyle: DateFormatter.Style) -> String","type":"method"}],"path":"\/documentation\/wing\/foundation\/date","title":"Date","type":"extension"}],"path":"\/documentation\/wing\/foundation","title":"Foundation","type":"extension"},{"children":[{"title":"Extended Protocols","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/wing\/swift\/binaryfloatingpoint\/cgfloat","title":"var cgFloat: CGFloat","type":"property"},{"path":"\/documentation\/wing\/swift\/binaryfloatingpoint\/cubed","title":"var cubed: Self","type":"property"},{"path":"\/documentation\/wing\/swift\/binaryfloatingpoint\/days","title":"var days: TimeInterval","type":"property"},{"path":"\/documentation\/wing\/swift\/binaryfloatingpoint\/double","title":"var double: Double","type":"property"},{"path":"\/documentation\/wing\/swift\/binaryfloatingpoint\/float","title":"var float: Float","type":"property"},{"path":"\/documentation\/wing\/swift\/binaryfloatingpoint\/hours","title":"var hours: TimeInterval","type":"property"},{"path":"\/documentation\/wing\/swift\/binaryfloatingpoint\/integer","title":"var integer: Int","type":"property"},{"path":"\/documentation\/wing\/swift\/binaryfloatingpoint\/isnegative","title":"var isNegative: Bool","type":"property"},{"path":"\/documentation\/wing\/swift\/binaryfloatingpoint\/ispositive","title":"var isPositive: Bool","type":"property"},{"path":"\/documentation\/wing\/swift\/binaryfloatingpoint\/minutes","title":"var minutes: TimeInterval","type":"property"},{"path":"\/documentation\/wing\/swift\/binaryfloatingpoint\/seconds","title":"var seconds: TimeInterval","type":"property"},{"path":"\/documentation\/wing\/swift\/binaryfloatingpoint\/squared","title":"var squared: Self","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/wing\/swift\/binaryfloatingpoint\/ceil()","title":"func ceil() -> Self","type":"method"},{"path":"\/documentation\/wing\/swift\/binaryfloatingpoint\/clamp(lowerbound:upperbound:)","title":"func clamp(lowerBound: Self, upperBound: Self)","type":"method"},{"path":"\/documentation\/wing\/swift\/binaryfloatingpoint\/clamp(to:)","title":"func clamp(to: ClosedRange<Self>)","type":"method"},{"path":"\/documentation\/wing\/swift\/binaryfloatingpoint\/clamped(lowerbound:upperbound:)","title":"func clamped(lowerBound: Self, upperBound: Self) -> Self","type":"method"},{"path":"\/documentation\/wing\/swift\/binaryfloatingpoint\/clamped(to:)","title":"func clamped(to: ClosedRange<Self>) -> Self","type":"method"},{"path":"\/documentation\/wing\/swift\/binaryfloatingpoint\/floor()","title":"func floor() -> Self","type":"method"},{"path":"\/documentation\/wing\/swift\/binaryfloatingpoint\/formatted(withfractiondigits:)","title":"func formatted(withFractionDigits: Int) -> String","type":"method"},{"path":"\/documentation\/wing\/swift\/binaryfloatingpoint\/isapproximatelyequal(to:tolerance:)","title":"func isApproximatelyEqual(to: Self, tolerance: Self) -> Bool","type":"method"},{"path":"\/documentation\/wing\/swift\/binaryfloatingpoint\/power(_:)","title":"func power(Self) -> Self","type":"method"},{"path":"\/documentation\/wing\/swift\/binaryfloatingpoint\/rounded()","title":"func rounded() -> Self","type":"method"},{"path":"\/documentation\/wing\/swift\/binaryfloatingpoint\/rounded(toplaces:)","title":"func rounded(toPlaces: Int) -> Self","type":"method"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/wing\/swift\/binaryfloatingpoint\/random()","title":"static func random() -> Self","type":"method"},{"path":"\/documentation\/wing\/swift\/binaryfloatingpoint\/random(in:)","title":"static func random(in: ClosedRange<Self>) -> Self","type":"method"},{"path":"\/documentation\/wing\/swift\/binaryfloatingpoint\/random(in:_:)","title":"static func random(in: Self, Self) -> Self","type":"method"}],"path":"\/documentation\/wing\/swift\/binaryfloatingpoint","title":"BinaryFloatingPoint","type":"extension"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/wing\/swift\/binaryinteger\/bool","title":"var bool: Bool","type":"property"},{"path":"\/documentation\/wing\/swift\/binaryinteger\/cgfloat","title":"var cgFloat: CGFloat","type":"property"},{"path":"\/documentation\/wing\/swift\/binaryinteger\/days","title":"var days: TimeInterval","type":"property"},{"path":"\/documentation\/wing\/swift\/binaryinteger\/double","title":"var double: Double","type":"property"},{"path":"\/documentation\/wing\/swift\/binaryinteger\/factorial","title":"var factorial: Self","type":"property"},{"path":"\/documentation\/wing\/swift\/binaryinteger\/float","title":"var float: Float","type":"property"},{"path":"\/documentation\/wing\/swift\/binaryinteger\/hours","title":"var hours: TimeInterval","type":"property"},{"path":"\/documentation\/wing\/swift\/binaryinteger\/iseven","title":"var isEven: Bool","type":"property"},{"path":"\/documentation\/wing\/swift\/binaryinteger\/isnegative","title":"var isNegative: Bool","type":"property"},{"path":"\/documentation\/wing\/swift\/binaryinteger\/isodd","title":"var isOdd: Bool","type":"property"},{"path":"\/documentation\/wing\/swift\/binaryinteger\/ispositive","title":"var isPositive: Bool","type":"property"},{"path":"\/documentation\/wing\/swift\/binaryinteger\/isprime","title":"var isPrime: Bool","type":"property"},{"path":"\/documentation\/wing\/swift\/binaryinteger\/minutes","title":"var minutes: TimeInterval","type":"property"},{"path":"\/documentation\/wing\/swift\/binaryinteger\/seconds","title":"var seconds: TimeInterval","type":"property"},{"path":"\/documentation\/wing\/swift\/binaryinteger\/string","title":"var string: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/wing\/swift\/binaryinteger\/clamped(to:)","title":"func clamped(to: ClosedRange<Self>) -> Self","type":"method"},{"path":"\/documentation\/wing\/swift\/binaryinteger\/currencyformatted(locale:)","title":"func currencyFormatted(locale: Locale) -> String?","type":"method"},{"path":"\/documentation\/wing\/swift\/binaryinteger\/downto(_:action:)","title":"func downto(Self, action: (Self) -> Void)","type":"method"},{"path":"\/documentation\/wing\/swift\/binaryinteger\/foreach(body:)","title":"func forEach(body: (Self) -> Void)","type":"method"},{"path":"\/documentation\/wing\/swift\/binaryinteger\/formatted(withstyle:)","title":"func formatted(withStyle: NumberFormatter.Style) -> String?","type":"method"},{"path":"\/documentation\/wing\/swift\/binaryinteger\/gcd(with:)","title":"func gcd(with: Self) -> Self","type":"method"},{"path":"\/documentation\/wing\/swift\/binaryinteger\/isdivisible(by:)","title":"func isDivisible(by: Self) -> Bool","type":"method"},{"path":"\/documentation\/wing\/swift\/binaryinteger\/lcm(with:)","title":"func lcm(with: Self) -> Self","type":"method"},{"path":"\/documentation\/wing\/swift\/binaryinteger\/power(of:)","title":"func power(of: Self) -> Self","type":"method"},{"path":"\/documentation\/wing\/swift\/binaryinteger\/times(action:)","title":"func times(action: () -> Void)","type":"method"},{"path":"\/documentation\/wing\/swift\/binaryinteger\/upto(_:action:)","title":"func upto(Self, action: (Self) -> Void)","type":"method"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/wing\/swift\/binaryinteger\/random(in:)","title":"static func random(in: ClosedRange<Self>) -> Self","type":"method"}],"path":"\/documentation\/wing\/swift\/binaryinteger","title":"BinaryInteger","type":"extension"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/wing\/swift\/stringprotocol\/base64decoded","title":"var base64Decoded: String?","type":"property"},{"path":"\/documentation\/wing\/swift\/stringprotocol\/base64encoded","title":"var base64Encoded: String?","type":"property"},{"path":"\/documentation\/wing\/swift\/stringprotocol\/bool","title":"var bool: Bool?","type":"property"},{"path":"\/documentation\/wing\/swift\/stringprotocol\/camelcased","title":"var camelCased: String","type":"property"},{"path":"\/documentation\/wing\/swift\/stringprotocol\/double","title":"var double: Double?","type":"property"},{"path":"\/documentation\/wing\/swift\/stringprotocol\/float","title":"var float: Float?","type":"property"},{"path":"\/documentation\/wing\/swift\/stringprotocol\/int","title":"var int: Int?","type":"property"},{"path":"\/documentation\/wing\/swift\/stringprotocol\/isalphabetic","title":"var isAlphabetic: Bool","type":"property"},{"path":"\/documentation\/wing\/swift\/stringprotocol\/isalphanumeric","title":"var isAlphanumeric: Bool","type":"property"},{"path":"\/documentation\/wing\/swift\/stringprotocol\/ishexadecimal","title":"var isHexadecimal: Bool","type":"property"},{"path":"\/documentation\/wing\/swift\/stringprotocol\/isnumeric","title":"var isNumeric: Bool","type":"property"},{"path":"\/documentation\/wing\/swift\/stringprotocol\/isphonenumber","title":"var isPhoneNumber: Bool","type":"property"},{"path":"\/documentation\/wing\/swift\/stringprotocol\/isstrongpassword","title":"var isStrongPassword: Bool","type":"property"},{"path":"\/documentation\/wing\/swift\/stringprotocol\/isvalidemail","title":"var isValidEmail: Bool","type":"property"},{"path":"\/documentation\/wing\/swift\/stringprotocol\/isvalidipaddress","title":"var isValidIPAddress: Bool","type":"property"},{"path":"\/documentation\/wing\/swift\/stringprotocol\/isvalidpostalcode","title":"var isValidPostalCode: Bool","type":"property"},{"path":"\/documentation\/wing\/swift\/stringprotocol\/isvalidurl","title":"var isValidURL: Bool","type":"property"},{"path":"\/documentation\/wing\/swift\/stringprotocol\/kebabcased","title":"var kebabCased: String","type":"property"},{"path":"\/documentation\/wing\/swift\/stringprotocol\/length","title":"var length: Int","type":"property"},{"path":"\/documentation\/wing\/swift\/stringprotocol\/lowercasedfirstletter","title":"var lowercasedFirstLetter: String","type":"property"},{"path":"\/documentation\/wing\/swift\/stringprotocol\/normalized","title":"var normalized: String","type":"property"},{"path":"\/documentation\/wing\/swift\/stringprotocol\/reversed","title":"var reversed: String","type":"property"},{"path":"\/documentation\/wing\/swift\/stringprotocol\/snakecased","title":"var snakeCased: String","type":"property"},{"path":"\/documentation\/wing\/swift\/stringprotocol\/trimmed","title":"var trimmed: String","type":"property"},{"path":"\/documentation\/wing\/swift\/stringprotocol\/uppercasedfirstletter","title":"var uppercasedFirstLetter: String","type":"property"},{"path":"\/documentation\/wing\/swift\/stringprotocol\/urldecoded","title":"var urlDecoded: String?","type":"property"},{"path":"\/documentation\/wing\/swift\/stringprotocol\/urlencoded","title":"var urlEncoded: String?","type":"property"},{"path":"\/documentation\/wing\/swift\/stringprotocol\/utf8data","title":"var utf8Data: Data?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/wing\/swift\/stringprotocol\/appending(_:)","title":"func appending(String) -> String","type":"method"},{"path":"\/documentation\/wing\/swift\/stringprotocol\/compareversion(to:)","title":"func compareVersion(to: String) -> ComparisonResult","type":"method"},{"path":"\/documentation\/wing\/swift\/stringprotocol\/contains(_:casesensitive:)","title":"func contains(String, caseSensitive: Bool) -> Bool","type":"method"},{"path":"\/documentation\/wing\/swift\/stringprotocol\/containsonlycharactersin(characterset:)","title":"func containsOnlyCharactersIn(characterSet: CharacterSet) -> Bool","type":"method"},{"path":"\/documentation\/wing\/swift\/stringprotocol\/date(withformat:locale:)","title":"func date(withFormat: String, locale: Locale) -> Date?","type":"method"},{"path":"\/documentation\/wing\/swift\/stringprotocol\/endswith(_:casesensitive:)","title":"func endsWith(String, caseSensitive: Bool) -> Bool","type":"method"},{"path":"\/documentation\/wing\/swift\/stringprotocol\/formatcurrency(locale:)","title":"func formatCurrency(locale: Locale) -> String?","type":"method"},{"path":"\/documentation\/wing\/swift\/stringprotocol\/formatnumber(decimalplaces:locale:)","title":"func formatNumber(decimalPlaces: Int, locale: Locale) -> String?","type":"method"},{"path":"\/documentation\/wing\/swift\/stringprotocol\/formatpercentage()","title":"func formatPercentage() -> String?","type":"method"},{"path":"\/documentation\/wing\/swift\/stringprotocol\/indexof(sub:occurrence:)","title":"func indexOf(sub: String, occurrence: Int) -> Int?","type":"method"},{"path":"\/documentation\/wing\/swift\/stringprotocol\/inserting(_:at:)","title":"func inserting(String, at: Int) -> String","type":"method"},{"path":"\/documentation\/wing\/swift\/stringprotocol\/isanagram(of:)","title":"func isAnagram(of: String) -> Bool","type":"method"},{"path":"\/documentation\/wing\/swift\/stringprotocol\/iscaseinsensitiveequal(to:)","title":"func isCaseInsensitiveEqual(to: String) -> Bool","type":"method"},{"path":"\/documentation\/wing\/swift\/stringprotocol\/isvalidurl(additionalschemes:)","title":"func isValidURL(additionalSchemes: [String]) -> Bool","type":"method"},{"path":"\/documentation\/wing\/swift\/stringprotocol\/matches(regex:)","title":"func matches(regex: String) -> Bool","type":"method"},{"path":"\/documentation\/wing\/swift\/stringprotocol\/matchingstrings(regex:)","title":"func matchingStrings(regex: String) -> [String]","type":"method"},{"path":"\/documentation\/wing\/swift\/stringprotocol\/padding(tolength:withpad:)","title":"func padding(toLength: Int, withPad: String) -> String","type":"method"},{"path":"\/documentation\/wing\/swift\/stringprotocol\/removing(_:)","title":"func removing(String) -> String","type":"method"},{"path":"\/documentation\/wing\/swift\/stringprotocol\/removinghtmltags()","title":"func removingHTMLTags() -> String","type":"method"},{"path":"\/documentation\/wing\/swift\/stringprotocol\/replacing(_:with:)","title":"func replacing(String, with: String) -> String","type":"method"},{"path":"\/documentation\/wing\/swift\/stringprotocol\/replacingoccurrences(ofregex:with:)","title":"func replacingOccurrences(ofRegex: String, with: String) -> String","type":"method"},{"path":"\/documentation\/wing\/swift\/stringprotocol\/sha1()","title":"func sha1() -> String","type":"method"},{"path":"\/documentation\/wing\/swift\/stringprotocol\/sha256()","title":"func sha256() -> String","type":"method"},{"path":"\/documentation\/wing\/swift\/stringprotocol\/startswith(_:casesensitive:)","title":"func startsWith(String, caseSensitive: Bool) -> Bool","type":"method"},{"path":"\/documentation\/wing\/swift\/stringprotocol\/substring(from:)","title":"func substring(from: Int) -> String","type":"method"},{"path":"\/documentation\/wing\/swift\/stringprotocol\/substring(to:)","title":"func substring(to: Int) -> String","type":"method"},{"path":"\/documentation\/wing\/swift\/stringprotocol\/todata(using:)","title":"func toData(using: String.Encoding) -> Data?","type":"method"},{"path":"\/documentation\/wing\/swift\/stringprotocol\/todoublearray(separatedby:)","title":"func toDoubleArray(separatedBy: String) -> [Double]","type":"method"},{"path":"\/documentation\/wing\/swift\/stringprotocol\/tointarray(separatedby:)","title":"func toIntArray(separatedBy: String) -> [Int]","type":"method"},{"path":"\/documentation\/wing\/swift\/stringprotocol\/tourl()","title":"func toURL() -> URL?","type":"method"},{"path":"\/documentation\/wing\/swift\/stringprotocol\/truncate(length:addellipsis:)","title":"func truncate(length: Int, addEllipsis: Bool) -> String","type":"method"},{"path":"\/documentation\/wing\/swift\/stringprotocol\/utf8encoded()","title":"func utf8Encoded() -> Data?","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/wing\/swift\/stringprotocol\/empty","title":"static var empty: String","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/wing\/swift\/stringprotocol\/random(length:)","title":"static func random(length: Int) -> String","type":"method"},{"path":"\/documentation\/wing\/swift\/stringprotocol\/random(length:from:)","title":"static func random(length: Int, from: String) -> String","type":"method"},{"path":"\/documentation\/wing\/swift\/stringprotocol\/randomalphabetic(length:)","title":"static func randomAlphabetic(length: Int) -> String","type":"method"},{"path":"\/documentation\/wing\/swift\/stringprotocol\/randomnumeric(length:)","title":"static func randomNumeric(length: Int) -> String","type":"method"},{"path":"\/documentation\/wing\/swift\/stringprotocol\/utf8decoded(_:)","title":"static func utf8Decoded(Data) -> String?","type":"method"}],"path":"\/documentation\/wing\/swift\/stringprotocol","title":"StringProtocol","type":"extension"},{"title":"Extended Enumerations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/wing\/swift\/optional\/isnilorempty","title":"var isNilOrEmpty: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/wing\/swift\/optional\/ifpresent(_:)","title":"func ifPresent((Wrapped) -> Void)","type":"method"},{"path":"\/documentation\/wing\/swift\/optional\/ifpresent(_:ifnil:)","title":"func ifPresent((Wrapped) -> Void, ifNil: () -> Void)","type":"method"},{"path":"\/documentation\/wing\/swift\/optional\/mapoptional(_:)","title":"func mapOptional<T>((Wrapped) -> T?) -> T?","type":"method"},{"path":"\/documentation\/wing\/swift\/optional\/or(_:)","title":"func or(Wrapped) -> Wrapped","type":"method"},{"path":"\/documentation\/wing\/swift\/optional\/orthrow(_:)","title":"func orThrow(@autoclosure () -> any Error) throws -> Wrapped","type":"method"}],"path":"\/documentation\/wing\/swift\/optional","title":"Optional","type":"extension"}],"path":"\/documentation\/wing\/swift","title":"Swift","type":"extension"}],"path":"\/documentation\/wing","title":"Wing","type":"module"}]},"schemaVersion":{"major":0,"minor":1,"patch":2}}